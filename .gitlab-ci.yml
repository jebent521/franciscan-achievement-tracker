stages:
  - build
  - integration

variables:
  IMAGE_NAME: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
  KANIKO_IMAGE: gcr.io/kaniko-project/executor:v1.21.1-debug
  POSTGRES_DB: achievements_db
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: franny_devs
  POSTGRES_HOST: postgres
  POSTGRES_PORT: 5432
  POSTGRES_URL: jdbc:postgresql://$POSTGRES_HOST:$POSTGRES_PORT/$POSTGRES_DB

flyway-migrate:
  stage: build
  services:
    - postgres:latest
  image: postgres
  before_script: # install wget and flyway
    - apt-get update -y && apt-get install -y wget
    - wget -qO- https://download.red-gate.com/maven/release/com/redgate/flyway/flyway-commandline/11.3.0/flyway-commandline-11.3.0-linux-x64.tar.gz | tar -xvz && ln -s `pwd`/flyway-11.3.0/flyway /usr/local/bin
  script:
    - flyway -url=$POSTGRES_URL -user=$POSTGRES_USER -password=$POSTGRES_PASSWORD migrate

build-server:
  stage: build
  image:
    name: $KANIKO_IMAGE
    entrypoint: ['']
  script:
    - /kaniko/executor
      --cache=true --cache-copy-layers=true --cache-ttl=24h
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
      --destination "${IMAGE_NAME}-test"

unit-test:
  stage: build
  image: node:latest
  script:
    - npm install --save-dev jest
    - npm run test:unit

validate-swagger:
  stage: build
  image: node:latest
  script:
    - npm install -g @apidevtools/swagger-cli
    - swagger-cli validate src/swagger.yaml

api-test:
  stage: integration
  services:
    - postgres:latest
    - ${IMAGE_NAME}-test
  image: node:latest
  before_script:
    - apt-get update -y && apt-get install -y wget
    - wget -qO- https://download.red-gate.com/maven/release/com/redgate/flyway/flyway-commandline/11.3.0/flyway-commandline-11.3.0-linux-x64.tar.gz | tar -xvz && ln -s `pwd`/flyway-11.3.0/flyway /usr/local/bin
    - npm install
    - flyway -url=$POSTGRES_URL -user=$POSTGRES_USER -password=$POSTGRES_PASSWORD migrate
  script:
    - npm run test:api
