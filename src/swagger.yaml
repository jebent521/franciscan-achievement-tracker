openapi: 3.0.0

info:
  title: Franciscan Achievement Tracker
  description: App where Franciscan students can track achievements earned in their time at Franciscan. Achievemnts range from simple to silly & elaborate.
  version: 1.0.0
  contact:
    name: Evan Whitmer
    email: ewhitmer001@student.franciscan.edu

servers:
  - url: http://localhost:5007
    description: The current url as the backend is still only for local serving

paths:
  /api/achievements:
    get:
      summary: Get a list of achievements
      description: Get a list of achievements from the API.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/achievements'
              example:
                achievements:
                  - id: 1
                    title: Cafarrhea
                    group_id: 1
                    description: Eat at the Caf
                    prerequisite: null
                    points: 10
                  - id: 2
                    title: The Grand Slam
                    group_id: 2
                    description: Attend all four daily masses in one day
                    prerequisite: null
                    points: 100
                  - id: 3
                    title: Four Years of B.S.
                    group_id: 3
                    description: Be a STEM major
                    prerequisite: null
                    points: 20
    post:
      summary: Add an achievement to the database.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/achievements'
            example:
              title: Pub Food
              group_id: 1
              description: Eat at the Pub
              prerequisite: null
              points: 10
      responses:
        '201':
          description: Successfully created achievement.
        '400':
          description: Missing criteria, invalid type, or invalid reference.
        '409':
          description: Unique field already exist in the database.
        '500':
          description: Internal Server Error
  /api/achievements/{id}:
    get:
      summary: Get achievements by ID
      description: Get a single achievements from the API.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/achievements'
              example:
                - id: 1
                  title: Cafarrhea
                  group_id: 1
                  description: Eat at the Caf
                  prerequisite: null
                  points: 10
        '404':
          description: Achievement not found
    delete:
      summary: Delete achievement from database by ID.
      description: Removed a single achievement from the API.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully deleted achievement.
        '400':
          description: Achievement is prerequisite or invalid ID type.
        '404':
          description: ID not found.
        '500':
          description: Internal Server Error
    put:
      summary: Modify existing achievement or create a new one if it doesn't exist.
      description: Modify or create a singe achievement from the API by ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/achievements'
            example:
              title: Pub Food
              group_id: 1
              description: Eat good food at the Pub
              prerequisite: null
              points: 10
      responses:
        '201':
          description: Successfully created achievement.
        '204':
          description: Successfully modified achievement.        
        '400':
          description: Missing criteria, invalid type, or invalid reference.
        '409':
          description: Unique field already exist in the database.
        '500':
          description: Internal Server Error
  /api/groups:
    get:
      summary: Get a list of groups
      description: Get a list of groups from the API.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/groups'
              example:
                groups:
                  - id: 1
                    name: General
                    description: General achievements
                  - id: 2
                    name: Spiritual
                    description: Achievements related to spirituality
                  - id: 3
                    name: Academic
                    description: Achievements related to academics
    post:
      summary: Add a group to the database.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/groups'
            example:
              name: Social
              description: Achievements related to social activities
      responses:
        '201':
          description: Successfully created group.
        '400':
          description: Missing criteria or invalid type
        '409':
          description: Unique field already exist in the database.
        '500':
          description: Internal Server Error
  /api/groups/{id}:
    get:
      summary: Get groups by ID
      description: Get a single group from the API.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groups'
              example:
                - id: 1
                  name: General
                  description: General achievements
        '404':
          description: Group not found
    delete:
      summary: Delete group from database by ID.
      description: Removed a single group from the API.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully deleted group.
        '400':
          description: Invalid ID type.
        '404':
          description: ID not found.
        '500':
          description: Internal Server Error
    put:
      summary: Modify existing group or create a new one if it doesn't exist.
      description: Modify or create a group from the API by ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/groups'
            example:
              name: Graduates
              description: Achievements related to graduates activities
      responses:
        '201':
          description: Successfully created group.
        '204':
          description: Successfully modified group.        
        '400':
          description: Missing criteria, invalid type, or invalid reference.
        '409':
          description: Unique field already exist in the database.
        '500':
          description: Internal Server Error
  /api/users:
    get:
      summary: Get a list of users
      description: Get a list of users from the API.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/users'
              example:
                users:
                  - id: 1
                    name: Angsty Alice
                    email: alice@angst.com
                    password: password123
                    points: 0
                  - id: 2
                    name: Boring Bob
                    email: bob@bored.com
                    password: password123
                    points: 0
                  - id: 3
                    name: Cranky Carol
                    email: carol@crank.com
                    password: password123
                    points: 0
    post:
      summary: Add an user to the database.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/users'
            example:
              name: Lazy Susan
              email: susan@lazy.com
              password: password123
              points: 10
      responses:
        '201':
          description: Successfully created user.
        '400':
          description: Missing criteria, invalid type, or invalid reference.
        '409':
          description: Unique field already exist in the database.
        '500':
          description: Internal Server Error
  /api/users/{id}:
    get:
      summary: Get user by ID
      description: Get a single user from the API.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/users'
              example:
                - id: 1
                  name: Angsty Alice
                  email: alice@angst.com
                  password: password123
                  points: 0
        '404':
          description: User not found
        '500':
          description: Internal Server Error
    delete:
      summary: Delete user from database by ID.
      description: Removed a single user from the API.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully deleted user.
        '400':
          description: user is invalid ID type.
        '404':
          description: ID not found.
        '500':
          description: Internal Server Error
    put:
      summary: Modify existing user or create a new one if it doesn't exist.
      description: Modify or create a user from the API by ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/users'
            example:
              name: Dashing Dan
              email: dan@dashing.com
              password: password123
              points: 10
      responses:
        '201':
          description: Successfully created group.
        '204':
          description: Successfully modified group.        
        '400':
          description: Missing criteria, invalid type, or invalid reference.
        '409':
          description: Unique field already exist in the database.
        '500':
          description: Internal Server Error
components:
  schemas:
    achievements:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        group_id:
          type: integer
          format: int64
        description:
          type: string
        prerequisite:
          type: string
        points:
          type: integer
          format: int64
    groups:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
    users:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        email:
          type: string
        password:
          type: string
        points:
          type: integer
          format: int64
